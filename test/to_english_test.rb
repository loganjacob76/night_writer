require_relative 'test_helper'

class ToEnglishTest < Minitest::Test
  def setup
    @message = [".00.0..0...000...0..0.0.00..0...000..0.00.000....00.0..0...00..0..0.0.0000..0.00",
 "0000..00..0.0...0...00...0.........00.0...00.0..0000..00..00..0...0..0.000...0.0",
 ".0....0.........................0...0.0.........0.....0....0..0...0.0.0.......0.",
 "0.0.000....00...000.0.00..000.0..0.0000.0...0..0000..0",
 ".0..0000..00.0..0..000........0.000.0.0..0..0.0..0.00.",
 "0.00......0.0.....0.0.0...0.000.0...0.0.....0...0...0."]

    @translator = ToEnglish.new(@message)
  end

  def test_it_exists
    assert_instance_of ToEnglish, @translator
  end

  def test_it_has_attributes
    assert_equal @message, @translator.message
    assert_instance_of Dictionary, @translator.dictionary
    assert_equal "", @translator.complete_message
  end

  def test_translate
    expected = "what if i had a message that was long enough to form multiple lines"

    assert_equal expected, @translator.translate
    assert_equal expected, @translator.complete_message
  end

  def test_form_letters
    expected = [".000.0","0.00..","0.....",".0000.","......",".00...","000...","......",
      ".00...","......","0.00..","0.....","00.0..","......","0.....","......","00..0.",
      "0..0..",".00.0.",".00.0.","0.....","0000..","0..0..","......",".0000.","0.00..",
      "0.....",".0000.","......",".000.0","0.....",".00.0.","......","0.0.0.","0..00.",
      "00.00.","0000..","......","0..0..","00.00.","0..00.","0...00","0000..","0.00..",
      "......",".0000.","0..00.","......","000...","0..00.","0.000.","00..0.","......",
      "00..0.","0...00","0.0.0.",".0000.",".00...","000.0.","0.0.0.","0..0..","......",
      "0.0.0.",".00...","00.00.","0..0..",".00.0."]

    assert_equal expected, @translator.form_letters
  end

  def test_make_rows
    expected = {
      top: ".00.0..0...000...0..0.0.00..0...000..0.00.000....00.0..0...00..0..0.0.0000..0.000.0.000....00...000.0.00..000.0..0.0000.0...0..0000..0",
      middle: "0000..00..0.0...0...00...0.........00.0...00.0..0000..00..00..0...0..0.000...0.0.0..0000..00.0..0..000........0.000.0.0..0..0.0..0.00.",
      bottom:".0....0.........................0...0.0.........0.....0....0..0...0.0.0.......0.0.00......0.0.....0.0.0...0.000.0...0.0.....0...0...0."
    }

    assert_equal expected, @translator.make_rows
  end
end
